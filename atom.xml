<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[D is for Development]]></title>
  <link href="http://draisy.github.io/atom.xml" rel="self"/>
  <link href="http://draisy.github.io/"/>
  <updated>2014-11-05T10:04:16-05:00</updated>
  <id>http://draisy.github.io/</id>
  <author>
    <name><![CDATA[Draisy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Active AREL's Quick Query at ActiveRecord Activity]]></title>
    <link href="http://draisy.github.io/blog/2014/11/05/arels-active-activity-in-activerecord/"/>
    <updated>2014-11-05T02:38:23-05:00</updated>
    <id>http://draisy.github.io/blog/2014/11/05/arels-active-activity-in-activerecord</id>
    <content type="html"><![CDATA[<p>Say that three times fast</p>

<!--more-->


<p>Before I begin to enthuse about the amazingness that is Arel, allow me to make the preliminary introductions. First things first, you meet ActiveRecord, ActiveRecord meet you. Great!</p>

<div style="text-align: center">
  <img src="http://i.imgur.com/7SfPSef.gif">
</div>


<p>ActiveRecord (camelcase) is part of the Ruby on Rails framework, while active record (lowercase) refers to a design pattern for relational databases. In other words, ActiveRecord is the Rails (very!) intelligent implementation of an active record pattern.</p>

<p>Thanks to the ActiveRecord design pattern, we can retrieve our database data as objects which in turn, allows us manipulate them with object oriented methods, as opposed to handling just static rows of data. Our ActiveRecord objects also come pre-equipped with CRUD methods to create, read, update and delete data.</p>

<p>Here’s a quick example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">first_name</span> <span class="o">=</span> <span class="err">“</span><span class="no">Percy</span><span class="err">”</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fires</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">first_name</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="err">“</span><span class="n">Percy</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much more reasonable, don’t you think? But ActiveRecords smarts go deeper. Say, what if I update his last name and save again?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="err">“</span><span class="no">Weasley</span><span class="err">”</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>This results in the SQL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">last_name</span> <span class="o">=</span> <span class="err">“</span><span class="n">Weasley</span><span class="err">”</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="k">user</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this new query, ActiveRecord now knows to fire the update instead of the insert command, because it keeps track of the objects and knows this particular one already exists. There’s no need to do another SQL insert, so it fires update instead and knows which row to modify.</p>

<p>With the basic ActiveRecord querying out of the way, let’s move onto the good stuff. Meet <a href="http://www.arelenglish.com/">Arel</a>, the seaman, the captain, and motorboat owner Arel. So Arel was a sailing coach somewhere near Toronto, and he can literally tie knots around you. Amazing, really.</p>

<div style="text-align:center">
  <img src="http://i.imgur.com/5sk8cnL.jpg">
</div>


<p>But that’s not all. There’s ALSO this other ARel, short for ActiveRelation, which is almost as amazing. It’s an object oriented expression of relational algebra (basically a set of operations that take 1 or more relations as input and produce one as output) but that&rsquo;s more easily explained as a simple way to generate complex - <span style="font-style: italic">and I mean complex</span> - database queries. Thanks to ARel, we can chain a series of queries together, much like we do for Ruby methods. ARel handles the complex joins and aggregation and creates one efficient SQL for us. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">first_name</span><span class="p">:</span> <span class="err">“</span><span class="no">Percy</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="err">“</span><span class="n">last_name</span> <span class="no">ASC</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>would create something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">users</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">posts</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">posts</span> <span class="k">on</span> <span class="p">(</span><span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">posts</span><span class="p">.</span><span class="k">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="k">WHERE</span> <span class="n">users</span><span class="p">.</span><span class="n">first_name</span> <span class="o">=</span> <span class="err">“</span><span class="n">Percy</span><span class="err">”</span><span class="p">)</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">last_name</span> <span class="k">ASC</span> <span class="k">LIMIT</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening here? First, with ActiveRecord, we break the query into segments, and chain them together.  As usual, ActiveRecord queries are lazy, and therefore return relations instead of the actual object. After all, there’s no reason to ask the database to run the query until the last minute. What if we don’t end up using it? Or what if we make it more complex? Since each segment of the querying code above returns a relation object, this is where ARel comes in to put the pieces together and write the SQL statement for the entire thing.</p>

<p>To clarify, ARel constructs the queries, and ActiveRecord does everything else. Here’s a view of the hierarchy: <span style="font-size:small">(source: <a href="https://twitter.com/camertron">Cameron Dutro</a>)</span></p>

<div style="text-align: center">
  <img src="http://i.imgur.com/XWTYQLS.jpg"/>
</div>


<p>In addition, the resulting relations only get executed when it becomes absolutely necessary to know what’s inside them. So, if we pass <code>@users = User.limit(5)</code> from our controller into our view, we are actually only passing the relation. It is only when we call a method on @users (i.e. <code>@users.first.last_name</code>), that the query is actually run and the relation gets stored as a real Ruby object. Thus, ARel manages the timing for when queries are executed, and queries don’t execute until we actually need them.</p>

<p>One key thing to remember is that the <code>find</code> or <code>all</code> methods are not as lazy as the other query constructs, and those do return the actual record or array of records from the database. Stick to <code>where</code> so you can maintain the speed and flexibility of our good friend ARel, or conversely, use <code>find</code> or  <code>all</code> when you do want to force a relation to evaluate to the actual object.</p>

<div style="text-align: center">
  <img src="http://i.imgur.com/gUSRwk5.png" height="300px">
</div>


<p>Following in ActiveRecord&rsquo;s footsteps, we developers should be lazy, too; and in our case, this means querying the database as few times as possible. That translates into figuring out what to look for ahead of time, and building a query to return only that result and only one time. Being lazy is a lot of work!</p>

<p>Consider the case when you force a relation return by a query to execute itself immediately, and then continue running additional queries on each member of the collection. Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">city</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, you&rsquo;re grabbing the records for all the users, looping through them, and calling an association on each user (assuming user <code>belongs_to :city</code>).</p>

<p>This results in one query to get all the users and another query for each user to find its associated city for a total of N + 1 queries, where N is your total users. So now we have a potentially giant number of queries eagerly waiting to slow our application down. Uh oh.</p>

<p>(Sidenote: Calling a regular attribute like <code>user.first_name</code> would not be an issue - it&rsquo;s only because we need to reach into an association that we&rsquo;re forced to run another query each time.)</p>

<p>Fear not. Rails has a solution for this in the form of &ldquo;eager loading.&rdquo; You can use the <code>include</code> method in my previous example above, which basically tells ActiveRecord to treat that field as an ordinary attribute. When you chain <code>include association</code> to your query clauses, ActiveRecords loads the object with the association into memory at the same time, so you don&rsquo;t have to run addition N queries to retrieve that data in the next round.</p>

<div style="text-align:center">
  <img src="http://i.imgur.com/me17adx.jpg" height="300px">
</div>


<p>ActiveRecord also has a cool feature called scope, where you can create a custom method chain to tack onto your queries like any normal method. For example, if you want your user to be able to filter blog posts, you could do something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># in your post.rb file</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:priority</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">:is_priority</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in your posts_controller.rb</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:priority</span><span class="o">]</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">priority</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, instead of having to rewrite a chain of ActiveRecord methods, we use a scope that contains all the logic and makes the code more readable. And since scopes also return relations objects, we can chain multiple scopes together to get the results you want.</p>

<div style="text-align:center">
  <img src="http://i.imgur.com/CoeT6Qf.jpg">
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ironboard Interactions]]></title>
    <link href="http://draisy.github.io/blog/2014/10/22/ironboard-interactions/"/>
    <updated>2014-10-22T02:20:32-04:00</updated>
    <id>http://draisy.github.io/blog/2014/10/22/ironboard-interactions</id>
    <content type="html"><![CDATA[<p>In which we iron out our ironboard.</p>

<!--more-->




<p>So, it&#8217;s just another Monday here at Flatiron, and we&#8217;re all just minding our own code and doing our little keyboard dances, when suddenly the internet goes down (again!) and we&#8217;re left bereft. </p>




<div style="text-align:center;"><img src ="http://i.imgur.com/NGx8To6.jpg" alt = "sad pug face" height="500"></div>




<p>But wait! Turns out it&#8217;s not entirely bad because our new router (I think?) can actually still handle 100 of us. <strong>Whoo!</strong> So while I was (im)patiently waiting my own turn, I came up with this idea to smooth things over for us for the next bout of our wifi&#8217;s mood swings.</p>




<p>When you run my <a href="https://github.com/draisy/ironboard" target="_blank">script</a> from your command line, it will connect you to ironboard via your terminal, and will automate your interactions with the ironboard application. It allow you to log in with the proper credentials and protections, and will click through the appropriate categories to find the relevant labs and todos. It will scrape today&#8217;s (or the most recent) schedule, and offer you a choice of all available labs. The lab you select will open directly in github, so you can fork and clone, and get right off the net so other people now have a chance to share in our most precious commodity.</p>




<p>Here&#8217;s a screenshot of the most recent output as of Tuesday night: <img src = "http://i.imgur.com/R6z9wkh.png" alt="program screenshot" height="650"></p>


<p>In order to make this happen, I used two ruby gems: 1) <a href="https://github.com/sparklemotion/mechanize" target="_blank">Mechanize</a> and 2) Our good old friend <a href="https://github.com/sparklemotion/nokogiri" target="_blank">Nogokiri</a>. Mechanize is an amazing tool for automating web interactions. Since Mechanize actually uses the nogokiri gem internally, we need to <code>gem install nogokiri</code> before we <code>gem install mechanize</code>, add require &lsquo;mechanize&rsquo; in our files and be on our merry way.</p>

<p><p>Mechanize is an amazing tool. Here is one quick example:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mechanize&#39;</span>
</span><span class='line'><span class="n">agent</span> <span class="o">=</span> <span class="no">Mechanize</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;<a href="http://google.com/&amp;#39;">http://google.com/&amp;#39;</a></span><span class="p">)</span>
</span><span class='line'><span class="n">google_form</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">form</span><span class="p">(</span><span class="s1">&#39;f&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">google_form</span><span class="o">.</span><span class="n">q</span> <span class="o">=</span> <span class="s1">&#39;flatiron school&#39;</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">google_form</span><span class="p">)</span>
</span><span class='line'><span class="n">pp</span> <span class="n">page</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That bit of code is creating the mechanize object, fetching the google homepage, grabbing the search form off the page, inserting flatiron school into the search field, submitting the request, and &lsquo;pretty printing&rsquo;
the results. Amazing, don&rsquo;t you think?</p>

<p><p>And for further examples, here are some snippets of the script I created</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>   <span class="vi">@agent</span> <span class="o">=</span> <span class="no">Mechanize</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>   <span class="vi">@page</span> <span class="o">=</span> <span class="vi">@agent</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;<a href="http://learn.flatironschool.com&amp;#39;">http://learn.flatironschool.com&amp;#39;</a></span><span class="p">)</span>
</span><span class='line'>   <span class="n">login</span><span class="p">(</span><span class="vi">@page</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="vi">@agent</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">link_with</span><span class="p">(</span><span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s1">&#39;Login&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>    <span class="n">login</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">form_with</span><span class="p">(</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;/session&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">username_field</span> <span class="o">=</span> <span class="n">login</span><span class="o">.</span><span class="n">field_with</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;login&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">username</span> <span class="o">=</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;Please enter your (github) username:  &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">echo</span> <span class="o">=</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">username_field</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">password_field</span> <span class="o">=</span> <span class="n">login</span><span class="o">.</span><span class="n">field_with</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">password</span> <span class="o">=</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;Enter password:  &quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">echo</span> <span class="o">=</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">password_field</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Thank you. Please wait a moment while we download the latest schedule.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="vi">@logged_in</span> <span class="o">=</span> <span class="n">login</span><span class="o">.</span><span class="n">submit</span> <span class="n">login</span><span class="o">.</span><span class="n">button</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>Upon instantiation of my ironboard class, I create a new mechanize object, fetch the ironboard homepage, and pass the page into my login function. The first line of my login function scans the page for a link that contains the text &lsquo;Login&rsquo;, and calls the click action on it. The second line scans that resulting page and returns the login form we will need to enter our credentials. The <code>link_with</code> and <code>form_with</code> are both mechanize functions that accept a hash parameter that define the critera to search for. I found those critera by inspecting the elements and viewing the source code of the ironboard page from the browser window.</p></p>

<p><p>The function continues to search for the appropriate login and password fields and I used the <a href="https://github.com/JEG2/highline" target ="_blank">highline</a> gem to get the username to hide the password from terminal view. I assign the values to the fields and call the submit function on my form variable. Tada! I now have a @logged_in page from where I can access all the goodies ironboard has to offer.</p></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">get_schedule</span>
</span><span class='line'>    <span class="vi">@schedule</span> <span class="o">=</span> <span class="vi">@logged_in</span><span class="o">.</span><span class="n">links_with</span><span class="p">(</span><span class="ss">:href</span> <span class="o">=&gt;</span><span class="sr">/daily-schedules/</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@schedule</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;div#daily-schedule h1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display_plan</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2"><strong><strong><strong>THE PLAN</strong></strong></strong>&quot;</span>
</span><span class='line'>    <span class="vi">@rows</span> <span class="o">=</span> <span class="vi">@schedule</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;tbody tr&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@rows</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">row</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>In these methods, I use mechanize to search through all the links that include &lsquo;daily-schedules&rsquo; in the URL, and select the last one (aka the most recent) to click. Then, I use nogokiri to display the welcome greeting for the day. The display_plan method also uses nogokiri to parse the html table that contains the plan and todos for the day.</p></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">display_labs</span>
</span><span class='line'>    <span class="vi">@labs_title</span> <span class="o">=</span> <span class="vi">@schedule</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;div#daily-schedule h1&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@labs_title</span> <span class="o">=</span> <span class="vi">@schedule</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;div#daily-schedule h2&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@labs_title</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2"><strong><strong><strong>THE </span><span class="si">#{</span><span class="vi">@labs_title</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2"></strong></strong></strong>&quot;</span>
</span><span class='line'>    <span class="vi">@labs_title</span><span class="o">.</span><span class="n">next_sibling</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;li a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">l</span><span class="o">.</span><span class="n">text</span><span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;*********************&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>Guess what display_labs does? It displays labs! Shocker, I know. So again, I use nogokiri to find the labs on the page, but I need to include that additional if statement, because some schedules display the titles as <code>&lt;h1&gt;</code> and some use <code>&lt;h2&gt;</code>. Don&rsquo;t ask me why.</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lesson</span> <span class="o">=</span> <span class="vi">@logged_in</span><span class="o">.</span><span class="n">links_with</span><span class="p">(</span><span class="ss">:href</span> <span class="o">=&gt;</span><span class="sr">/lessons/</span><span class="p">)</span><span class="o">[</span><span class="n">input</span> <span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">click</span>
</span><span class='line'>    <span class="n">get_github_page</span><span class="p">(</span><span class="n">lesson</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_github_page</span><span class="p">(</span><span class="n">lesson</span><span class="p">)</span>
</span><span class='line'>    <span class="n">github</span> <span class="o">=</span> <span class="n">lesson</span><span class="o">.</span><span class="n">links_with</span><span class="p">(</span><span class="ss">:href</span> <span class="o">=&gt;</span> <span class="sr">/github.com\/flatiron-school-ironboard/</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">href</span>
</span><span class='line'>    <span class="nb">open</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">github</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p> And finally, I take my user input and fire back a lesson variable that contains the appropriate link for the user&rsquo;s selection. Initially, I had used nogokiri here too, and created a complicated hash and nested collect methods to find these values, until I smacked myself on the head and returned to my mechanize behaviors. The <code>links_with</code> method simply returns an array of all the results, so I select the first one, and grab the href value. My <code>get_github_page</code> uses the same method to find the github link within the new lesson page, and then sends the command to open it in your browser.</p></p>

<p><p>So there you have it. Ironboard for terminal is now available for all! I still want to flesh this out with some more functionality, but in the meantime, here&rsquo;s the <a href="https://github.com/draisy/ironboard" target="_blank">github link</a> where I welcome any forks and pulls that come my way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Don't Mean to Pry]]></title>
    <link href="http://draisy.github.io/blog/2014/10/07/i-dont-mean-to-pry/"/>
    <updated>2014-10-07T01:59:30-04:00</updated>
    <id>http://draisy.github.io/blog/2014/10/07/i-dont-mean-to-pry</id>
    <content type="html"><![CDATA[<p>But really, I do.</p>

<!--more-->


<p>Let&rsquo;s be honest Ruby folks, sometimes we just need to pry. I know it doesn&rsquo;t sound
pretty, but let&rsquo;s face it, how else are we going to know the inner workings of our
all our nearest and dearest Ruby programs? Don&rsquo;t tell me you&rsquo;re not DYING to know
exactly why that pesky bug is keeping all your tests from passing. Oh, and don&rsquo;t get me started on those tests right now&hellip;back to pry.</p>

<p>Let&#8217;s pry!</p>




<p>For the purpose of this mini tutorial, I&#8217;m going to assume you have pry installed
on your machine, but if you don&#8217;t, go ahead and watch this nifty little video <a href="http://vimeo.com/26391171">here</a>, and come right back when you&#8217;re done.</p>




<p>All right. Moving on.</p>




<p>So you&#8217;re working on your nested (or more like nested[nested][more-nested][inner-nested][and-one-more-for-good-measure-nested] )hash method, and try as you might, you&#8217;re getting everything but the values you really need. This is where our good friend pry comes to shine.</p>




<p>Here&#8217;s a snippet of code from our latest Hashketball game. (Super fun game, guys. We should play it more often).</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">player_numbers</span><span class="p">(</span><span class="n">team_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">game_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">team</span><span class="p">,</span> <span class="n">game_data</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">game_data</span><span class="o">[</span><span class="ss">:team_name</span><span class="o">]</span> <span class="o">==</span> <span class="n">team_name</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">game_data</span><span class="o">[</span><span class="ss">:players</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">player</span><span class="o">|</span>
</span><span class='line'>        <span class="n">player</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s pry-time! First, make sure you have <code>require 'pry'</code> included in your file. Second,
put <code>binding.pry</code> somewhere within that loop, to get an inside view of your variables at work. Something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">player_numbers</span><span class="p">(</span><span class="n">team_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">game_hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">team</span><span class="p">,</span> <span class="n">game_data</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">game_data</span><span class="o">[</span><span class="ss">:team_name</span><span class="o">]</span> <span class="o">==</span> <span class="n">team_name</span>
</span><span class='line'>      <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span> <span class="c1">#this line - right here</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">game_data</span><span class="o">[</span><span class="ss">:players</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">player</span><span class="o">|</span>
</span><span class='line'>        <span class="n">player</span><span class="o">[</span><span class="ss">:number</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! At this point, when you run your program from the command line, as soon as your loop evaluates to that line, it will break into the pry console. And now you can enter <code>game_data[:team_name]</code> directly in the console while your program is running, and see the values it actually contains. Who knows, maybe it&rsquo;s your lucky day and everything contains what you think it should, and there&rsquo;s no nil (or implicit or Fixnum or String or&hellip;) conversion errors of any variety whatsoever.</p>

<p><strong> Bonus ProTip for those of you reading till the end:</strong><br/>
  Unlike irb, pry doesn&rsquo;t just quit when you type <code>exit</code>. Nope, in the pry console, &lsquo;exit&rsquo; means I&rsquo;m done evaluating this line of code, please move on. So each time you type &lsquo;exit&rsquo;, pry simply moves on to evaluate the next line or expression in code. So how to quit without hiting the ctrl + C multiple times in frustration? You exit with a bang, like so! <code>exit!</code></p>

<p>  <strong>Bonus ProTip #2:</strong><br/>
  When pry sends a long, multiline value to your console, you need to display the entire thing before you can continue. You can do this the long way, by hitting <code>enter</code> repeatedly as each line shows up, or you can type <code>wq</code>  (for write quit) so the entire value displays at once, and you can continue.</p>

<p>  <p> And this is why I love pry. You can&rsquo;t pry pry away from me. Because as it turns out, sometimes it IS ok to pry.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://draisy.github.io/blog/2014/10/02/my-first-post-on-octopress/"/>
    <updated>2014-10-02T11:37:40-04:00</updated>
    <id>http://draisy.github.io/blog/2014/10/02/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello, world!&rdquo;</p>

<!--more-->

]]></content>
  </entry>
  
</feed>
